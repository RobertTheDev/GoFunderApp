// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Charity {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  category    String // Charity's category.
  description String // Charity's description.
  logo        String // URL to the charity's logo image (optional).
  name        String // Charity's name.

  @@map("charities")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  email         String?   @unique // User's email address (unique).
  emailVerified DateTime? @map("email_verified") // Date and time when the user's email was verified (optional).
  firstName     String?   @map("first_name") // User's first name.
  image         String? // URL to the user's profile image (optional).
  lastName      String?   @map("last_name") // User's last name.
  // mfaType             String?   @map("mfa_type") // MFA type chosen by the user ("TOTP" or "Mobile").
  // mfaSecret           String?   @map("mfa_secret") // Secret key for TOTP or mobile verification.
  password      String? // Hashed password for authentication. (optional)
  // phoneNumber         String?   @unique @map("phone_number") // User's phone number (unique).
  // phoneNumberVerified DateTime? @map("phone_number_verified") // Date and time when the user's phone number was verified (optional).
  // sessions            Session[] // Array of user sessions.

  @@map("users")
}

// model Account {
//   id                 String    @id @default(cuid())
//   createdAt          DateTime  @default(now()) @map("created_at")
//   updatedAt          DateTime  @updatedAt @map("updated_at")
//   accessToken        String?   @map("access_token") // Access token for the account (optional).
//   accessTokenExpires DateTime? // Expiry date and time for the access token (optional).
//   providerAccountId  String    @map("provider_account_id") // Unique identifier for the account on the provider side.
//   providerId         String    @map("provider_id") // Identifier from the authentication provider.
//   providerType       String    @map("provider_type") // Type of authentication provider (e.g., "email", "google", etc.).
//   refreshToken       String?   @map("refresh_token") // Refresh token for the account (optional).
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId             String    @map("user_id") // Foreign key referencing the `id` field in the `User` model, indicating which user the account belongs to.

//   @@unique([providerId, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @updatedAt @map("updated_at")
//   accessToken  String   @unique // Unique access token for the session. 
//   expires      DateTime // Expiry date and time for the session.
//   sessionToken String   @unique @map("session_token") // Unique token for the session.
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId       String   @map("user_id") // Foreign key referencing the `id` field in the `User` model, indicating which user the session belongs to.

//   @@map("sessions")
// }

model VerificationRequest {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  expires    DateTime // Expiry date and time of the verification request.
  identifier String // Identifier for verification (e.g., email or username).
  token      String   @unique // Unique token for the verification request.

  @@unique([identifier, token])
  @@map("verification_requests")
}
